(*
   time usage: 33,
   energy usage:
     - 275 (using ::idle() in the pre-loop), with call to ::off()
     -  55 (using ::zap()  in the pre-loop), with call to ::off()
     -  33 (using ::idle() in the pre-loop), without calling ::off()
     -  33 (using ::zap()  in the pre-loop), without calling ::off()

   This, I think, is what the tech report says, since at the "Stub::off" we call the
   td() function to compute spent time; this increase in energy gets multiplied in.

   Placing a Stub::off() after the pre-loop, immediately followed
   by a Stub::on(), will also result in a energy usage of 33.

Note:

- the CPU consumes neither time nor energy
- stub::on()  = (no time, no incidental energy, power drain becomes 1)
- stub::off() = (no time, no incidental energy, power drain becomes 0)
- stub::zap() = (no time, incidental energy=1)
- stub::idle()= (time=1,  no indidental energy)

 *)

(* expect: (Map(BUG -> 0, CPU -> 1960, Radio -> 3986, Sensor -> 5979, Stub -> 11883),1993) *)
(* expect: -tr (Map(BUG -> 0, CPU -> 1960, Radio -> 3986, Sensor -> 5979, Stub -> 13445),1993) *)
(* expect: -s (Map(BUG -> 0, CPU -> 1960, Radio -> 3986, Sensor -> 5979, Stub -> 1993),1993) *)
(* expect: -u (Map(BUG -> 0, CPU -> 1960, Radio -> 3986, Sensor -> 5979, Stub -> 21796),1993) *)
(* expect: -tr -u -s (Map(BUG -> 0, CPU -> 1960, Radio -> 3986, Sensor -> 5979, Stub -> 1993),1993) *)
function program(X)
  Stub::on();

  while 42 > 5 bound 10 do                       // <-- pre-loop
    Stub::idle()
  end while;

  while 23 < 10 bound 23 do
    if X = 5 then Stub::off() else skip end if;  // <- confuse the analyser
    Stub::idle();
  end while;

  Stub::off();
end function


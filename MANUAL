 _____ ____    _    _                _
 | ____/ ___|  / \  | |    ___   __ _(_) ___
 |  _|| |     / _ \ | |   / _ \ / _` | |/ __|
 | |__| |___ / ___ \| |__| (_) | (_| | | (__
 |_____\____/_/   \_\_____\___/ \__, |_|\___|
                                |___/

=============================================

ecalogic: a tool for performing energy consumption analysis.

usage summary:

ecalogic.jar [OPTIONS] file1.eca [[Alias=]file2.ecm ...]

Functionality options:

  -t --terse             Give only brief output of analysis
  -I --import [W=]<uri>  Load a component from the Java classpath as W
  -h --help              This friendly help message
  -P --fixPatience <N>   Num iters for finding fixpoints (def=10000)
  -e --entry <main>      Perform analyss in the given function (def=program)

If no Alias= is provided for an explicitly loaded component, it is determined
from the classpath/filename instead.

Options controlling analysis:

  -tr --techReport       Use while loop as specified in Tech Report
  -s  --sync             Synchronize all components to the global time
  -u  --update           Update component timestamps, even when no change

The options -s or -u should give stricter bounds. -u is probably
subsumed by -s, but since this is a research tool, more analysis is needed.

=============================================
In detail:

If you specify components to be loaded on the commandline, they override import
statements in the .eca file.


If you supply -u, there are two changes that deviate from the paper:

 1) A delta function always updates its timestamp, even if the state did not change
 2) A delta function also takes into account the amount if time the component-function itself 
    takes while calculating the new energy-aware component state

This should usually result in tighter bounds, but might (in some cases) also do the reverse.


If you supply -s, the follow changes are applied:

 1) Before and after each control structure in your program, all components are updated to the
    new timestamp. This should produce much tighter bounds. We have not analyzed whether
    -u -s has different behaviour from just -s
  }


If you supply -tr, the While-analysis as specified in the technical report is performed, i.e.
the first iteration of each While-loop is analyzed separately.

=============================================
 _
 | | __ _ _ __   __ _ _   _  __ _  __ _  ___
 | |/ _` | '_ \ / _` | | | |/ _` |/ _` |/ _ \
 | | (_| | | | | (_| | |_| | (_| | (_| |  __/
 |_|\__,_|_| |_|\__, |\__,_|\__,_|\__, |\___|
                |___/             |___/


Programs to be analyzer have to written as .eca files. This is a simple WHILE-like language 
with arithmetic expression, restricted while loops and simple Hoare-annotations:

    function DoSomething(X,Y,Z)

      if X < Y+3 then
        skip
      else
        skip
      end if

      SomeComponent::doSomething(Z)

      { T <- Z }               // annotation
      while X < 23 bound T do  // bound while loop

    end function

Functions can call eachother, but recursion is not allowed. 

Variables in ranking functions used in while-loop must always refer to function parameters, constants,
or be accompanied by an annotation.

.eca programs can import components using a 'import component' followed by a class-identifier, which
is looked up in the Java classpath.

=============================================
  ___ ___  _ __ ___  _ __   ___  _ __   ___ _ __ | |_
 / __/ _ \| '_ ` _ \| '_ \ / _ \| '_ \ / _ \ '_ \| __|
| (_| (_) | | | | | | |_) | (_) | | | |  __/ | | | |_
 \___\___/|_| |_| |_| .__/ \___/|_| |_|\___|_| |_|\__|
                    |_|

Components can be specified in .icm files.

An example of a component is shown below:

    component Radio(active: 0..1)

        initial active := 1

        component function on uses 40 time 40 energy
            active := 1
        end function

        component function off uses 20 time 20 energy
            active := 0
        end function

        component function queue(X) uses 30 time 30 energy
        component function send uses 100 time 100 energy

        function phi := 2 + 200 * active

    end component

A component function is visible to the user of your component, and is considered in
the energy analysis. Other functions are internal to the component. Every component
needs to have a 'phi' function specifying the energy consumption. 

Component state variables (such as 'active' above) need to be specified in the component header.
Initial values for these are optional.


* Using DSLModel.scala:

Alternatively, components can be specified using Scala.
See the source code distribution for examples.

